name: EDLM XIA Jobs Code CI/CD

on:
  push:
    branches:
      - setup
  pull_request:
    branches: 
      - main
    types: [opened, synchronize]
jobs:
  code-test:
# Kicks off the workflow and prepares Github to run coverage test using a ubuntu-latest container.
    name: Code CI/CD
    runs-on: ubuntu-latest
    env:
      OS: ubuntu-latest
      PYTHON: '3.9'
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
# Install dependencies required for tests
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./requirements.txt
    
    - name: Create .env file
      run: |
        echo "AWS_ACCESS_KEY_ID={{ secrets.AWS_ACCESS_KEY_ID }}" >> .env

    #Start running test scripts and generate the coverage report
    - name: Unit Tests/Code Coverage
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        echo "Create openlxp docker network"
        docker network create openlxp
        echo "Docker network successfully created"
        echo "Running coverage unit test"
        docker-compose --env-file ./.env run app_xia_jobs sh -c "python manage.py waitdb && coverage run manage.py test --tag=unit && flake8 && coverage report && coverage report --fail-under=80"
      
      #Start running test scripts and generate the coverage report
    # - name: Generate Coverage Report
    #   env:
    #     # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     # AWS_REGION: ${{ secrets.AWS_REGION }}
    #     # CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
    #     # CSRF_COOKIE_DOMAIN: ${{ secrets.CSRF_COOKIE_DOMAIN }}
    #     # CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
    #     # DB_NAME: ${{ secrets.DB_NAME }}
    #     # DB_HOST: ${{ secrets.DB_HOST }}
    #     # DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    #     # DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
    #     # DB_USER: ${{ secrets.DB_USER }}
    #     # DJANGO_SUPERUSER_EMAIL: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
    #     # DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
    #     # DJANGO_SUPERUSER_USERNAME: ${{ secrets.DJANGO_SUPERUSER_USERNAME }}
    #     # LOG_PATH: ${{ secrets.LOG_PATH}}
    #     GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
    #   run: |
    #     echo "Create openlxp docker network"
    #     docker network create openlxp
    #     echo "Docker network successfully created"
    #     echo "Running coverage unit test"
    #     docker compose run -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
    #                        -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
    #                        -e AWS_REGION=${{ secrets.AWS_REGION }} \
    #                        -e CSRF_COOKIE_DOMAIN=${{ secrets.CSRF_COOKIE_DOMAIN }} \
    #                        -e CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} \
    #                        -e DB_NAME=${{ secrets.DB_NAME }} \
    #                        -e DB_HOST=${{ secrets.DB_HOST }} \
    #                        -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
    #                        -e DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }} \
    #                        -e DB_USER=${{ secrets.DB_USER }} \
    #                        -e DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }} \
    #                        -e DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }} \
    #                        -e DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }} \
    #                        -e LOG_PATH=${{ secrets.LOG_PATH}} \
    #                        app sh -c \
    #                        "python coverage run manage.py test --tag=unit && flake8 && coverage report && coverage report --fail-under=80"

#  sonar-scan:
#    name: Sonarcloud Scan
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#    - name: SonarCloud Scan
#      uses: sonarsource/sonarcloud-github-action@master
#      env:
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    # requires dependency from step above
    needs: code-test
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
    # 
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
        IMAGE_TAG: latest
      run: |
        echo "Starting docker build"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG